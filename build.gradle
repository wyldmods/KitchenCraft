buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'curseforge'

minecraft {
    version = "$minecraft_version-$forge_version"
    runDir = 'run'
}

subprojects {
    apply plugin: 'java'
    archivesBaseName = "$rootProject.name-$name"
    dependencies { compile rootProject }

    build.dependsOn rootProject.reobf
    rootProject.reobf {
        reobf(jar) { spec -> spec.classpath = sourceSets.main.compileClasspath }
    }

    jar {
        from rootProject.sourceSets.main.output
    }

    task deobfJar(type: Jar) {
        from rootProject.sourceSets.main.output
        from sourceSets.main.output
        classifier = 'deobf'
    }

    assemble.dependsOn deobfJar
}

allprojects {
    group = 'org.wyldmods.kitchencraft'
    version = "MC$minecraft_version-$mod_version-${System.getenv('BUILD_NUMBER')}"

    repositories {
        maven { // WAILA
            name "Mobius Repo"
            url "http://mobiusstrip.eu/maven"
        }
        maven { // CCC/NEI (for WAILA)
            name 'CB Repo'
            url "http://chickenbones.net/maven/"
        }
        maven { // ttCore
            name 'tterrag Repo'
            url "http://maven.tterrag.com"
        }
        maven { // AppleCore
            name 'squeek Repo'
            url "http://www.ryanliptak.com/maven"
        }
        maven { // Forestry
            name 'Forestry Repo'
            url "http://maven.ic2.player.to/"
        }
    }
    dependencies {
        compile "tterrag.core:ttCore:MC1.7.10-0.1.0-61"
        compile "mcp.mobius.waila:Waila:1.5.8a_1.7.10"
        compile "com.enderio:EnderIO:1.7.10-2.2.8.341"
        compile "applecore:AppleCore:1.7.10-1.0.0+79.c2865:api"
    }


    processResources {
        inputs.property 'version', project.version
        inputs.property 'mcversion', project.minecraft_version
        from(sourceSets.main.resources.srcDirs) {
            include '**.*.info'
            include '**/*.properties'

            expand([
                    'version'  : project.version,
                    'mcversion': project.minecraft_version
            ])
        }
    }
}

task comboJar(type: Jar) {
    from sourceSets.main.output
    project.subprojects.each {
        from it.sourceSets.main.output
    }
    classifier = 'combo'
}
tasks.assemble.dependsOn comboJar
reobf { reobf(comboJar) }

task comboJarDeobf(type: Jar) {
    from sourceSets.main.output
    project.subprojects.each {
        from it.sourceSets.main.output
    }
    classifier = 'combo-deobf'
}
tasks.assemble.dependsOn comboJarDeobf

jar {
    destinationDir = new File(buildDir, 'unused')
}

project.subprojects.each { p ->
    p.tasks.withType(Jar)*.each { t ->
        t.destinationDir = new File(rootProject.getBuildDir(), 'libs')
    }
}

curse {
    dependsOn 'reobf'
    onlyIf { return project.hasProperty('curseforge_key') && 'true'.equals(System.getenv('CURSE')) }

    if (project.hasProperty('curseforge_key')) apiKey = project.curseforge_key
    projectId = project.curse_projectId
    changelog = project.hasProperty('changelog') ? project.changelog : ''
    releaseType = 'beta'
    artifact = comboJar
    additionalArtifact comboJarDeobf
    project.subprojects.each {proj -> 
        proj.tasks.withType(Jar) { t -> 
            additionalArtifact t 
        }
    }
}